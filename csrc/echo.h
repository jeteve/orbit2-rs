/*
 * This file was generated by orbit-idl-2 - DO NOT EDIT!
 */

#ifndef echo_H
#define echo_H 1
#include <glib.h>
#define ORBIT_IDL_SERIAL 20
#include <orbit/orbit-types.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/** typedefs **/
#if !defined(ORBIT_DECL_Echo) && !defined(_Echo_defined)
#define ORBIT_DECL_Echo 1
#define _Echo_defined 1
#define Echo__freekids CORBA_Object__freekids
typedef CORBA_Object Echo;
extern CORBA_unsigned_long Echo__classid;
#if !defined(TC_IMPL_TC_Echo_0)
#define TC_IMPL_TC_Echo_0 'e'
#define TC_IMPL_TC_Echo_1 'c'
#define TC_IMPL_TC_Echo_2 'h'
#define TC_IMPL_TC_Echo_3 'o'
#ifdef ORBIT_IDL_C_IMODULE_echo
static
#else
extern
#endif
ORBIT2_MAYBE_CONST struct CORBA_TypeCode_struct TC_Echo_struct;
#define TC_Echo ((CORBA_TypeCode)&TC_Echo_struct)
#endif
#endif

/** POA structures **/
#ifndef _defined_POA_Echo
#define _defined_POA_Echo 1
typedef struct {
  void *_private;
void (*echoString)(PortableServer_Servant _servant, const CORBA_char * input, CORBA_Environment *ev);
} POA_Echo__epv;
typedef struct {
  PortableServer_ServantBase__epv *_base_epv;
  POA_Echo__epv *Echo_epv;
} POA_Echo__vepv;
typedef struct {
  void *_private;
  POA_Echo__vepv *vepv;
} POA_Echo;
extern void POA_Echo__init(PortableServer_Servant servant, CORBA_Environment *ev);
extern void POA_Echo__fini(PortableServer_Servant servant, CORBA_Environment *ev);
#endif /* _defined_POA_Echo */

/** skel prototypes **/
void _ORBIT_skel_small_Echo_echoString(POA_Echo *_ORBIT_servant, gpointer _ORBIT_retval, gpointer *_ORBIT_args, CORBA_Context ctx,CORBA_Environment *ev, void (*_impl_echoString)(PortableServer_Servant _servant, const CORBA_char * input, CORBA_Environment *ev));

/** stub prototypes **/
void Echo_echoString(Echo _obj, const CORBA_char * input, CORBA_Environment *ev);
#include <orbit/orb-core/orbit-interface.h>

#ifdef ORBIT_IDL_C_IMODULE_echo
static 
#else
extern 
#endif
ORBit_IInterface Echo__iinterface;
#define Echo_IMETHODS_LEN 1
#ifdef ORBIT_IDL_C_IMODULE_echo
static 
#else
extern 
#endif
ORBit_IMethod Echo__imethods[Echo_IMETHODS_LEN];

/** IMethods index */

#ifndef __Echo__imethods_index
#define __Echo__imethods_index
typedef enum {
	Echo_echoString__imethods_index
} Echo__imethods_index;
#endif /* __Echo__imethods_index */

#ifndef __ORBIT_IMETHODS_INDEX
#define __ORBIT_IMETHODS_INDEX
#define ORBIT_IMETHODS_INDEX(m) (m ## __imethods_index)
#endif /* __ORBIT_IMETHODS_INDEX */

#ifdef __cplusplus
}
#endif /* __cplusplus */

#ifndef EXCLUDE_ORBIT_H
#include <orbit/orbit.h>

#endif /* EXCLUDE_ORBIT_H */
#endif
#undef ORBIT_IDL_SERIAL
